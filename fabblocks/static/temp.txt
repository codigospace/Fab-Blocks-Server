<!doctype html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Fab Blocks</title>
    <link rel="stylesheet" type="text/css" href="main.css">
    <link rel="stylesheet" type="text/css" href="javascript/highlight/styles/default.css">
</head>
<body>
    <xml id="startBlocks" style="display: none">
        <block type="controls_setupLoop" deletable="false"></block>
    </xml>
    <div id="wrap">
        <div id="buttons">
            <button id="compileFileButton" onclick="compileFile()">Compilar</button>
            <button id="uploadButton" onclick="compileFile()">Subir</button>
            <button id="openFileButton" onclick="openFile()">Abrir</button>
            <button id="newFileButton" onclick="newFile()">Nuevo</button>
            <button id="saveFileButton" onclick="saveFile()">Guardar</button>
            <button id="resetWorkspaceButton" onclick="resetWorkspace()">Resetear Fab Blocks</button>
            <button id="saveDataButton" onclick="saveData()">Guardar en servidor</button>
            <button id="toogleButton" onclick="toggleCode()">Mostrar Codigo</button>
        </div>
        <div id="blockly" style="float: left; width: 100%;"></div>
        <div id="code" style="float: right; width: 33%;"></div>
    </div>
    <script src="javascript/jquery/dist/jquery.min.js"></script>
    <script src="javascript/underscore/underscore.js"></script>
    <script src="javascript/highlight/highlight.pack.js"></script>
    <script src="javascript/blockly-bq/blockly_compressed.js"></script>
    <script src="javascript/blockly-bq/blocks_compressed.js"></script>
    <script src="javascript/blockly-bq/arduino_compressed.js"></script>
    <script src="roboblocks.js"></script>
    <script>
        if (window.roboblocksLanguage === undefined || window.roboblocksLanguage == null) {
            var roboblocksLanguage = 'es-ES';
        }

        RoboBlocks.load({
            zoom: 0.5
        });

        // New workspace for each test case
        var el = document.getElementById('blockly');
        Blockly.inject(el, {
            toolbox: Blockly.createToolbox()
        });
        // Create a default setup/loop block
        Blockly.Xml.domToWorkspace(Blockly.getMainWorkspace(),
            document.getElementById('startBlocks'));

        $('.blocklySvg, #blockly').height('100%');
        $('.blocklySvg').width('100%');

        var colors = [
            "",
            RoboBlocks.LANG_COLOUR_PROCEDURES,
            RoboBlocks.LANG_COLOUR_CONTROL,
            RoboBlocks.LANG_COLOUR_LOGIC,
            RoboBlocks.LANG_COLOUR_MATH,
            RoboBlocks.LANG_COLOUR_VARIABLES,
            RoboBlocks.LANG_COLOUR_TEXT,
            RoboBlocks.LANG_COLOUR_COMMUNICATION,
            RoboBlocks.LANG_COLOUR_MODULAR,
            RoboBlocks.LANG_COLOUR_ZUM,
            RoboBlocks.LANG_COLOUR_BQ,
            RoboBlocks.LANG_COLOUR_ADVANCED,
            RoboBlocks.LANG_COLOUR_LCD,
            RoboBlocks.LANG_COLOUR_SERVO,
        ];

        $('.blocklyTreeRow').each(function (i, e) {
            $(e).prepend('<span class="treeLabelBlock" style="background-color:' + colors[i] + '"></span>');
        });

        // Update code
        Blockly.addChangeListener(function () {
            $('#code').html('<code class="c++"><pre>'
                + escapeCode(Blockly.Arduino.workspaceToCode())
                + '</pre></code>');
            // Highlight
            $("pre").each(function (i, e) {
                hljs.highlightBlock(e);
            });
        });

        // Función para guardar datos
        function saveData() {
            console.log("boton presionado de guardar en el servidor");
            var code = Blockly.Arduino.workspaceToCode();
            var formData = new FormData();
            formData.append('info', code);

            fetch('save_data.php', {
                method: 'POST',
                body: formData
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Error al guardar los datos: ' + response.statusText);
                    }
                    return response.text();
                })
                .catch(error => {
                    console.error('Error al guardar los datos:', error);
                });
        }

        // Función para compilar
        function compileFile() {
            console.log("boton compilar");
            fetch('compile_file.php', {
                method: 'POST'
            })
                .then(response => response.text())
                .catch(error => {
                    console.error('Error al compilar el archivo:', error);
                });
        }

        // Show/hide code
        function toggleCode() {
            $('#code').toggle(); // Toggle the visibility of the code
            var button = document.getElementById("toogleButton");
            
            if ($('#code').css('display') == 'none') {
                $('#blockly').width('100%');
                button.textContent = "Mostrar Codigo";       
            } else {
                $('#blockly').width('66%');
                button.textContent = "Ocultar Codigo";
            }
            
            // Resize workspace
            Blockly.fireUiEvent(window, "resize");
        }

        function escapeCode(code) {
            var str = code;
            str = str.replace(/</g, "&lt;");
            str = str.replace(/>/g, "&gt;");
            return str;
        }
       
        function saveFile() {
            // Obtener el XML del Blockly
            var xml = Blockly.Xml.domToPrettyText(Blockly.Xml.workspaceToDom(Blockly.getMainWorkspace()));
            var blob = new Blob([xml], { type: "text/xml" });

            // Crear un enlace temporal para descargar el archivo
            var link = document.createElement("a");
            link.href = URL.createObjectURL(blob);

            // Establecer el nombre predeterminado del archivo
            link.download = "nuevo_archivo.fab";

            // Hacer clic en el enlace para abrir el cuadro de diálogo del explorador de archivos
            link.click();
        }

        function openFile() {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = '.fab';
            input.style.display = 'none';

            input.onchange = function(e) {
                const file = e.target.files[0];
                if (!file) {
                    console.error('No se ha seleccionado ningún archivo.');
                    return;
                }

                const reader = new FileReader();
                reader.onload = function(event) {
                    const fileContent = event.target.result.replace(/\n/g, '');
                    // Open a new window
                    const newWindow = window.open(window.location.href, '_blank');

                    // Log file content to the console of the new window
                    newWindow.onload = function() {
                        newWindow.eval(`
                            var xml = '${fileContent}';
                            console.log('File content:', xml);
                            Blockly.mainWorkspace.clear();
                            console.log('Blockly main workspace cleared');
                            Blockly.Xml.domToWorkspace(Blockly.getMainWorkspace(), Blockly.Xml.textToDom(xml));
                            console.log('XML inserted into workspace');
                        `);
                    };
                };
                reader.readAsText(file);
            };

            document.body.appendChild(input);
            input.click();
        }

        function newFile() {
            const newWindow = window.open(window.location.href, '_blank');
            newWindow.focus();
        }

        function resetWorkspace() {
            Blockly.mainWorkspace.clear();
            Blockly.Xml.domToWorkspace(Blockly.getMainWorkspace(),
                document.getElementById('startBlocks'));
        }
       
        $(document).ready(function() {
            toggleCode();
        });
    </script>
</body>
</html>
